/home/tgaldes/.local/lib/python3.5/site-packages/OpenSSL/crypto.py:14: CryptographyDeprecationWarning: Python 3.5 support will be dropped in the next release of cryptography. Please upgrade your Python.
  from cryptography import utils, x509
/usr/local/lib/python3.5/dist-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.26.3) or chardet (3.0.4) doesn't match a supported version!
  RequestsDependencyWarning)
Traceback (most recent call last):
  File "/cfld/projects/cfld/gmail/framework/main.py", line 81, in <module>
    m.run()
  File "/cfld/projects/cfld/gmail/framework/main.py", line 58, in run
    self.inboxes[inbox].refresh()
  File "/cfld/projects/cfld/gmail/framework/Inbox.py", line 33, in refresh
    self.service.refresh()
  File "/cfld/projects/cfld/gmail/services/gmail/GMailService.py", line 124, in refresh
    self.__populate_query_result(self.default_query, self.default_limit)
  File "/cfld/projects/cfld/gmail/services/gmail/GMailService.py", line 91, in __populate_query_result
    thread_map = self.service.users().threads().get(userId='me', id=item['id'], format='full').execute()
  File "/usr/local/lib/python3.5/dist-packages/googleapiclient/_helpers.py", line 134, in positional_wrapper
    return wrapped(*args, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/googleapiclient/http.py", line 907, in execute
    raise HttpError(resp, content, uri=self.uri)
googleapiclient.errors.HttpError: <HttpError 500 when requesting https://gmail.googleapis.com/gmail/v1/users/me/threads/1777a77137389807?format=full&alt=json returned "Internal error encountered.">

2021-04-10 06:05:03,862 [WARNING]                 main:- Caught exception while trying to refresh. Stack: Traceback (most recent call last):
  File "./framework/main.py", line 61, in run_one
    self.refresh()
  File "./framework/main.py", line 42, in refresh
    self.inboxes[inbox].refresh()
  File "/home/tgaldes/git/projects/cfld/gmail/framework/Inbox.py", line 34, in refresh
    self.service.refresh()
  File "/home/tgaldes/git/projects/cfld/gmail/services/gmail/GMailService.py", line 147, in refresh
    self.__populate_query_result(self.default_query, self.default_limit)
  File "/home/tgaldes/git/projects/cfld/gmail/services/gmail/GMailService.py", line 85, in __populate_query_result
    q_result = self.service.users().threads().list(userId='me', maxResults = limit, q='{}'.format(q)).execute()
  File "/usr/local/lib/python3.5/dist-packages/googleapiclient/_helpers.py", line 134, in positional_wrapper
    return wrapped(*args, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/googleapiclient/http.py", line 907, in execute
    raise HttpError(resp, content, uri=self.uri)
googleapiclient.errors.HttpError: <HttpError 429 when requesting https://gmail.googleapis.com/gmail/v1/users/me/threads?alt=json&maxResults=30&q=label%3AINBOX returned "User-rate limit exceeded.  Retry after 2021-04-10T10:20:01.929Z">


<br>body, p, th, td { font-family: verdana, arial, sa...' contains:'new rental application' thread_id: 178c40c27b9374b1 subject: Rental Application | Julia Shneidman 165 4th Street Northwest
2021-04-11 23:08:46,612 [  DEBUG]         ComboMatcher:- matched 2 matchers, returning true for thread_id: 178c40c27b9374b1 subject: Rental Application | Julia Shneidman 165 4th Street Northwest
2021-04-11 23:08:46,612 [  DEBUG]           RuleHolder:- #102: process tenant application (match): matches
2021-04-11 23:08:46,612 [  DEBUG]       SubjectMatcher:- 'Rental Application | Julia Shneidman 165 4th Street Northwest' matches regex:'^Rental Application .*$' thread_id: 178c40c27b9374b1 subject: Rental Application | Julia Shneidman 165 4th Street Northwest
2021-04-11 23:08:46,612 [  DEBUG]       SubjectMatcher:- SubjectMatcher: returning groups: ()
<br>body, p, th, td { font-family: verdana, arial, sa...' contains:'new rental application' thread_id: 178c40c27b9374b1 subject: Rental Application | Julia Shneidman 165 4th Street Northwest
2021-04-11 23:08:46,613 [  DEBUG]           RuleHolder:- #103: process tenant application (add draft back to tenant): processing thread_id: 178c40c27b9374b1 subject: Rental Application | Julia Shneidman 165 4th Street Northwest
2021-04-11 23:08:46,613 [   INFO]           AllMatcher:- always returing true for thread_id: 178c40c27b9374b1 subject: Rental Application | Julia Shneidman 165 4th Street Northwest
2021-04-11 23:08:46,613 [  DEBUG]           RuleHolder:- #103: process tenant application (add draft back to tenant): matches
2021-04-11 23:08:46,613 [  DEBUG]       RedirectAction:- processing a thread
2021-04-11 23:08:46,784 [  DEBUG]         GMailService:- Query Julia Shneidman returned 3 threads.
2021-04-11 23:08:46,784 [  DEBUG]         GMailService:- Returning existing thread: thread_id: 178b9cfb5f211f9b subject: New submission for Georgia Tech
2021-04-11 23:08:46,927 [  DEBUG]         GMailService:- Returning existing thread: thread_id: 178bd1740e4db7fb subject: New submission for Georgia Tech
2021-04-11 23:08:46,927 [   INFO]       RedirectAction:- No found_threads matched the expression: inbox.query(get_new_application_name(thread), limit=1)


might not want to throw in the 'get_lease_sent_out_emails' func - what does this mean ??
if I do a make them say no off a tour email, I would rather not have the people added in the tour info get the make them say no. proper way to do this would be to cc those people in the tour email so I can specify reply all = false in thread.recipients


rule additions

1- instead of immediately archiving 'Your signature is requrired' emails, we can leave them in the inbox and then archive them once the signed lease email for that tenant comes in, that way they stay as a reminder for me to sign the lease, OR we can add the automation label ourselves and add an empty draft to it so it shows up in the automation folder, maybe create a tag action so we label automation and label tag and then don't remove the automation label if it has the tag label so that everything requiring user attention remains in the automation folder
DONE? 2- can we change up how we are querying emails so that a rule like makethemsayno will get a chance to act on a thread on every iteration?
    we could split that rule into two and query for 3rd_party and automation/contact_form labels
    - add 'not 'automation/make_them_say_no' in thread.labels()' to the expression matcher and then we could use force_query and not need to worry about checking on the same thread many times
    - something like a 24 hr reset when we drop all the finalized history ids and will re process all the rules (that should be ok since we can kill and restart the process w/ it not getting stuff messed up due to double processing)
3- in third party threads when they respond and we've asked them to give a start date and room type we can do a tour email plus do a direct to the official application


in the current changelist let's make reinitialized mid run a property on the thread that the gmail service will set via the constructor and the inbox will query from the thread each time instead of changing the interface of query
