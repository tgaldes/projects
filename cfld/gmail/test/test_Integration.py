from unittest.mock import MagicMock, Mock
import unittest
import NewLogger
NewLogger.global_log_level = 'DEBUG'
from main import Main
from Thread import Thread
from TestUtil import get_thread_constructor_args
from Logger import Logger

class IntegrationTest(unittest.TestCase):

    def test_dummy(self):
        sheet_service = Mock()
        sheet_service.get_lookup_info_data = MagicMock(return_value=[['parking', 'UCLA', "We don't have parking available but you should be able to find it at such and such a place"], ['', 'USC', 'We have parking available for $55 a month.'], ['', 'SJSU', 'There is parking available for $50 a month.'], ['bathrooms', 'UCLA', "Info about UCLA's bathrooms"], ['', 'USC', "Info about USC's bathrooms."], ['', 'SJSU', "Info about USC's bathrooms."], ['payment', 'UCLA', "Once your lease is executed we'll send you an invite for our tenant portland Buildium. There you'll be able to pay with your bank account."], ['', 'USC', "Once your lease is executed we'll send you an invite for our tenant portland Buildium. There you'll be able to pay with your bank account."], ['', 'SJSU', "Once your lease is executed we'll put you in touch with the property owners and they'll coordinate payment via check or Zelle with you."], ['executed lease emails', 'UCLA', 'jc@one.com,kp@two.com'], ['', 'SJSU', 'jc@one.com,kp@two.com'], ['', 'USC', 'tgaldes@gmail.com,apply@cf-ld.com'], ['', 'UMN', 'jfreeman1916@gmail.com'], ['executed lease draft', 'UCLA', "I'm putting you in touch with Joe, who will coordinate move in and payment info. I hope you enjoy your stay at UCLA DTD!<br><br>"], ['', 'SJSU', "I'm putting you in touch with George, who will coordinate move in and payment info. I hope you enjoy your stay at SJSU Theta Chi!<br><br>"], ['', 'USC', "Thanks for getting your lease signed. I'm putting you in touch with Tyler, who will coordinate payment and move in. I hope you enjoy your stay at Portland St!<br><br>"], ['', 'UMN', "Thanks for getting your lease signed. I'm putting you in touch with Jerry, who will coordinate payment and move in. I hope you enjoy your stay at UMN!<br><br>"], ['short_name', '2715 Portland St', 'USC'], ['', '2715 Portland Street', 'USC'], ['', '123 S 11th St', 'SJSU'], ['', '649 Gayley Ave', 'UCLA'], ['', '165 4th St NW', 'Georgia Tech'], ['', '165 4th Street Northwest', 'Georgia Tech'], ['', '1000 5th St SE', 'UMN'], ['', '1000 5th Street Southeast', 'UMN']])
        sheet_service.get_availability = MagicMock(return_value=[['UCLA', 'male', 'single'], ['', '', 'double'], ['', '', 'quad'], ['', 'female', 'single'], ['', '', 'double'], ['', '', 'quad'], ['USC', 'male', 'single'], ['', '', 'singlewb'], ['', '', 'double'], ['', '', 'doublewb'], ['', '', 'triple'], ['', 'female', 'single'], ['', '', 'double'], ['', '', 'triple'], ['', '', 'singlewb'], ['', '', 'doublwb']])
        sheet_service.get_availability_blurbs = MagicMock(return_value=[['', "We don't have {room_type} available at {short_name}.<br><br>"], ['-1000', "We don't have {room_type}s open at {short_name} until {available}. ", "{room_type}s aren't available until {available}. ", 'Let me know if that option interests you.\\n\\n', 'Let me know if either of those options interest you.\\n\\n', 'Let me know if any of those options interest you.\\n\\n'], ['0', 'We have {room_type} available at {short_name} on your desired move in date of {desired}. If that sounds good please go to https://cleanfloorsandlockingdoorsinc.managebuilding.com/Resident/rental-application/ and complete the application.<br><br>']])
        sheet_service.get_rule_construction_data = MagicMock(return_value=[['name', 'email', 'dest_email', 'label_regex', 'subject_regex', 'body_regex', 'expression_match', 'action', 'value', 'finder', 'destinations', 'group', 'group_type', 'rule_type'], ['Label by school', 'apply', '', '', 'New submission for ([A-Za-z]*)', '', '', 'label', '"Schools/" + match(0)', '', '', '1', 'ifelse'], ['Label by school', 'apply', '', '', 'Zumper tenant lead for (.*) -.*', '', '', 'label', '"Schools/" + short_name(match(0))', '', '', '1', 'ifelse'], ['Label by school', 'apply', '', '', '[\\S^]* is requesting information about (.*?)[#,]', '', '', 'label', '"Schools/" + short_name(match(0))', '', '', '1', 'ifelse'], ['Label by school', 'apply', '', '', 'RentPath Lead from .* \\((.*)\\)', '', '', 'label', '"Schools/" + short_name(match(0))', '', '', '1', 'ifelse'], ['Label by school', 'apply', '', '', '[\\S^]* wants to tour (.*) -', '', '', 'label', '"Schools/" + short_name(match(0))', '', '', '1', 'ifelse'], ['Label by school', 'apply', '', '', '[\\S^]* is requesting an application for (.*) #.*', '', '', 'label', '"Schools/" + short_name(match(0))', '', '', '1', 'ifelse'], ['Remove catch all', 'apply', '', 'Schools/.*', '', '', '', 'unlabel', '"Catch all"', '', '', '1', 'ifelse'], ['Add catch all', 'apply', '', '', '.*', '', '', 'label', '"Catch all"', '', '', '1', 'ifelse'], [], ['Label 3rd party advertiser', 'apply', '', '', 'Zumper tenant lead for (.*) -.*', '', '', 'label', '"3rd_party"', '', '', '2', 'ifelse'], ['Label 3rd party advertiser', 'apply', '', '', '[\\S^]* is requesting information about (.*?)[#,]', '', '', 'label', '"3rd_party"', '', '', '2', 'ifelse'], ['Label 3rd party advertiser', 'apply', '', '', 'RentPath Lead from .* \\((.*)\\)', '', '', 'label', '"3rd_party"', '', '', '2', 'ifelse'], ['Label 3rd party advertiser', 'apply', '', '', '[\\S^]* wants to tour (.*) -', '', '', 'label', '"3rd_party"', '', '', '2', 'ifelse'], ['Label 3rd party advertiser', 'apply', '', '', '[\\S^]* is requesting an application for (.*) #.*', '', '', 'label', '"3rd_party"', '', '', '2', 'ifelse'], [], ['Remove existing draft', 'apply', '', 'automation', '', '', 'thread.has_existing_draft()', 'remove_draft', '', '', '', '3'], [], ['make them say no', 'apply', '', 'Schools/(.*)', '', '', 'thread.need_make_them_say_no()', 'draft', '"Haven\'t heard from you in a few days so reaching out to confirm you\'re no longer interested in housing at {}.<br><br>".format(match(0))', '', 'thread.default_reply()', '4'], [], ['general info match', 'apply', '', '3rd_party', '.*RentPath Lead.*', '.*additional details.*', 'not thread.is_last_message_from_us() and len(thread) == 1', 'empty', '', '', '', '5', 'ifany', 'if'], ['general info match', 'apply', '', '3rd_party', '', '.*learn.*', 'not thread.is_last_message_from_us() and len(thread) == 1', 'empty', '', '', '', '5', '', 'if'], \
        ['general info match', 'apply', '', '3rd_party', '', '.*more.*', 'not thread.is_last_message_from_us() and len(thread) == 1', 'empty', '', '', '', '5', '', 'if'], ['general info match', 'apply', '', '3rd_party', '', '.*information.*', 'not thread.is_last_message_from_us() and len(thread) == 1', 'empty', '', '', '', '5', '', 'if'], ['general info match', 'apply', '', '3rd_party', '', '.*interested.*', 'not thread.is_last_message_from_us() and len(thread) == 1', 'empty', '', '', '', '5', '', 'if'], ['general info match', 'apply', '', 'Schools/(.*)', '', '', '', 'draft', '"Thanks for reaching out! There\'s always up to date information for {} on our website cf-ld.com/{} and {}. Happy to answer any specific questions you have for me :)<br><br>".format(match(0), match(0).lower().replace(\' \', \'-\'), link("cf-ld.com/{}-faqs".format(match(0).lower().replace(\' \', \'-\'), "here")))', '', 'thread.default_reply()', '5', '', 'any'], [], ['3rd party requesting viewing', 'apply', '', 'Schools/(.*)', '', '.*schedule.*', 'not thread.is_last_message_from_us()', 'draft', '"Before we put you in touch with our on site manager for a viewing, we\'ll need you to fill out cf-ld.com/contact-form so we know a few basics about your desired stay at {}.<br><br>".format(match(0))', '', 'thread.default_reply()', '6', 'ifelse'], ['3rd party requesting viewing', 'apply', '', 'Schools/(.*)', '', '.*view.*', 'not thread.is_last_message_from_us()', 'draft', '"Before we put you in touch with our on site manager for a viewing, we\'ll need you to fill out cf-ld.com/contact-form so we know a few basics about your desired stay at {}.<br><br>".format(match(0))', '', 'thread.default_reply()', '6', 'ifelse'], ['3rd party requesting viewing', 'apply', '', 'Schools/(.*)', '', '.*tour.*', 'not thread.is_last_message_from_us()', 'draft', '"Before we put you in touch with our on site manager for a viewing, we\'ll need you to fill out cf-ld.com/contact-form so we know a few basics about your desired stay at {}.<br><br>".format(match(0))', '', 'thread.default_reply()', '6', 'ifelse'], [], ['available', 'apply', '', 'Schools/(.*)', '', '.*available.*', 'not thread.is_last_message_from_us()', 'empty', '', '', '', '7', 'ifany', 'if'], ['available', 'apply', '', 'Schools/(.*)', '', '.*availability.*', 'not thread.is_last_message_from_us()', 'empty', '', '', '', '7', '', 'if'], ['available', 'apply', '', 'Schools/(.*)', '', '', '', 'draft', '"Up to date availability for {} can always be found at cf-ld.com/{}<br><br>".format(match(0), match(0).lower())', '', 'thread.default_reply()', '7', '', 'any'], [], ['add salutation if we have a draft', 'apply', '', 'automation', '', '', 'thread.has_existing_draft()', 'prepend_draft', '"{}<br><br>".format(thread.salutation())', '', 'thread.default_reply()', '8'], ['add signature if we have a draft', 'apply', '', 'automation', '', '', 'thread.has_existing_draft()', 'draft', '"{}".format(thread.signature())', '', 'thread.default_reply()', '9']])
        
        email_service = Mock()
        
        all_threads = [Thread(*get_thread_constructor_args('thread_test_inputs/one_email_thread.txt'), email_service)]
        email_service.get_all_threads = MagicMock(return_value=all_threads)
        email_service.get_user = MagicMock(return_value='apply')
        email_service.get_label_name = MagicMock(return_value='test label string')
        email_service.set_label = MagicMock(return_value={'labelIds' : ['test label id']})

        logger = Logger('TestIntegration')
        m = Main([email_service], sheet_service, logger, 'cfld')
        m.run()

        self.assertTrue('test label string' in all_threads[0].labels())


